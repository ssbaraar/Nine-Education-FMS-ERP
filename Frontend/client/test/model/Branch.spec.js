/*
 * School Management System API
 * APIs for managing branches, employees, students, receipts, etc.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: tejabhargavpodila@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.52
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SchoolManagementSystemApi);
  }
}(this, function(expect, SchoolManagementSystemApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Branch', function() {
      beforeEach(function() {
        instance = new SchoolManagementSystemApi.Branch();
      });

      it('should create an instance of Branch', function() {
        // TODO: update the code to test Branch
        expect(instance).to.be.a(SchoolManagementSystemApi.Branch);
      });

      it('should have the property branchName (base name: "branchName")', function() {
        // TODO: update the code to test the property branchName
        expect(instance).to.have.property('branchName');
        // expect(instance.branchName).to.be(expectedValueLiteral);
      });

      it('should have the property branchCode (base name: "branchCode")', function() {
        // TODO: update the code to test the property branchCode
        expect(instance).to.have.property('branchCode');
        // expect(instance.branchCode).to.be(expectedValueLiteral);
      });

      it('should have the property branchAddress (base name: "branchAddress")', function() {
        // TODO: update the code to test the property branchAddress
        expect(instance).to.have.property('branchAddress');
        // expect(instance.branchAddress).to.be(expectedValueLiteral);
      });

    });
  });

}));
