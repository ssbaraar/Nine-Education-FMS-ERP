/*
 * School Management System API
 * APIs for managing branches, employees, students, receipts, etc.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: tejabhargavpodila@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.52
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SchoolManagementSystemApi);
  }
}(this, function(expect, SchoolManagementSystemApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Student', function() {
      beforeEach(function() {
        instance = new SchoolManagementSystemApi.Student();
      });

      it('should create an instance of Student', function() {
        // TODO: update the code to test Student
        expect(instance).to.be.a(SchoolManagementSystemApi.Student);
      });

      it('should have the property applicationNumber (base name: "applicationNumber")', function() {
        // TODO: update the code to test the property applicationNumber
        expect(instance).to.have.property('applicationNumber');
        // expect(instance.applicationNumber).to.be(expectedValueLiteral);
      });

      it('should have the property dateOfJoining (base name: "dateOfJoining")', function() {
        // TODO: update the code to test the property dateOfJoining
        expect(instance).to.have.property('dateOfJoining');
        // expect(instance.dateOfJoining).to.be(expectedValueLiteral);
      });

      it('should have the property course (base name: "course")', function() {
        // TODO: update the code to test the property course
        expect(instance).to.have.property('course');
        // expect(instance.course).to.be(expectedValueLiteral);
      });

      it('should have the property firstName (base name: "firstName")', function() {
        // TODO: update the code to test the property firstName
        expect(instance).to.have.property('firstName');
        // expect(instance.firstName).to.be(expectedValueLiteral);
      });

      it('should have the property surName (base name: "surName")', function() {
        // TODO: update the code to test the property surName
        expect(instance).to.have.property('surName');
        // expect(instance.surName).to.be(expectedValueLiteral);
      });

      it('should have the property parentName (base name: "parentName")', function() {
        // TODO: update the code to test the property parentName
        expect(instance).to.have.property('parentName');
        // expect(instance.parentName).to.be(expectedValueLiteral);
      });

      it('should have the property gender (base name: "gender")', function() {
        // TODO: update the code to test the property gender
        expect(instance).to.have.property('gender');
        // expect(instance.gender).to.be(expectedValueLiteral);
      });

      it('should have the property batch (base name: "batch")', function() {
        // TODO: update the code to test the property batch
        expect(instance).to.have.property('batch');
        // expect(instance.batch).to.be(expectedValueLiteral);
      });

      it('should have the property branch (base name: "branch")', function() {
        // TODO: update the code to test the property branch
        expect(instance).to.have.property('branch');
        // expect(instance.branch).to.be(expectedValueLiteral);
      });

      it('should have the property yearOfJoining (base name: "yearOfJoining")', function() {
        // TODO: update the code to test the property yearOfJoining
        expect(instance).to.have.property('yearOfJoining');
        // expect(instance.yearOfJoining).to.be(expectedValueLiteral);
      });

      it('should have the property modeOfResidence (base name: "modeOfResidence")', function() {
        // TODO: update the code to test the property modeOfResidence
        expect(instance).to.have.property('modeOfResidence');
        // expect(instance.modeOfResidence).to.be(expectedValueLiteral);
      });

      it('should have the property primaryContact (base name: "primaryContact")', function() {
        // TODO: update the code to test the property primaryContact
        expect(instance).to.have.property('primaryContact');
        // expect(instance.primaryContact).to.be(expectedValueLiteral);
      });

      it('should have the property secondaryContact (base name: "secondaryContact")', function() {
        // TODO: update the code to test the property secondaryContact
        expect(instance).to.have.property('secondaryContact');
        // expect(instance.secondaryContact).to.be(expectedValueLiteral);
      });

      it('should have the property firstYearHostelFee (base name: "firstYearHostelFee")', function() {
        // TODO: update the code to test the property firstYearHostelFee
        expect(instance).to.have.property('firstYearHostelFee');
        // expect(instance.firstYearHostelFee).to.be(expectedValueLiteral);
      });

      it('should have the property firstYearTuitionFee (base name: "firstYearTuitionFee")', function() {
        // TODO: update the code to test the property firstYearTuitionFee
        expect(instance).to.have.property('firstYearTuitionFee');
        // expect(instance.firstYearTuitionFee).to.be(expectedValueLiteral);
      });

      it('should have the property secondYearHostelFee (base name: "secondYearHostelFee")', function() {
        // TODO: update the code to test the property secondYearHostelFee
        expect(instance).to.have.property('secondYearHostelFee');
        // expect(instance.secondYearHostelFee).to.be(expectedValueLiteral);
      });

      it('should have the property secondYearTuitionFee (base name: "secondYearTuitionFee")', function() {
        // TODO: update the code to test the property secondYearTuitionFee
        expect(instance).to.have.property('secondYearTuitionFee');
        // expect(instance.secondYearTuitionFee).to.be(expectedValueLiteral);
      });

      it('should have the property pendingFirstYearTuitionFee (base name: "pendingFirstYearTuitionFee")', function() {
        // TODO: update the code to test the property pendingFirstYearTuitionFee
        expect(instance).to.have.property('pendingFirstYearTuitionFee');
        // expect(instance.pendingFirstYearTuitionFee).to.be(expectedValueLiteral);
      });

      it('should have the property pendingFirstYearHostelFee (base name: "pendingFirstYearHostelFee")', function() {
        // TODO: update the code to test the property pendingFirstYearHostelFee
        expect(instance).to.have.property('pendingFirstYearHostelFee');
        // expect(instance.pendingFirstYearHostelFee).to.be(expectedValueLiteral);
      });

      it('should have the property pendingSecondYearTuitionFee (base name: "pendingSecondYearTuitionFee")', function() {
        // TODO: update the code to test the property pendingSecondYearTuitionFee
        expect(instance).to.have.property('pendingSecondYearTuitionFee');
        // expect(instance.pendingSecondYearTuitionFee).to.be(expectedValueLiteral);
      });

      it('should have the property pendingSecondYearHostelFee (base name: "pendingSecondYearHostelFee")', function() {
        // TODO: update the code to test the property pendingSecondYearHostelFee
        expect(instance).to.have.property('pendingSecondYearHostelFee');
        // expect(instance.pendingSecondYearHostelFee).to.be(expectedValueLiteral);
      });

      it('should have the property paidFirstYearTuitionFee (base name: "paidFirstYearTuitionFee")', function() {
        // TODO: update the code to test the property paidFirstYearTuitionFee
        expect(instance).to.have.property('paidFirstYearTuitionFee');
        // expect(instance.paidFirstYearTuitionFee).to.be(expectedValueLiteral);
      });

      it('should have the property paidFirstYearHostelFee (base name: "paidFirstYearHostelFee")', function() {
        // TODO: update the code to test the property paidFirstYearHostelFee
        expect(instance).to.have.property('paidFirstYearHostelFee');
        // expect(instance.paidFirstYearHostelFee).to.be(expectedValueLiteral);
      });

      it('should have the property paidSecondYearTuitionFee (base name: "paidSecondYearTuitionFee")', function() {
        // TODO: update the code to test the property paidSecondYearTuitionFee
        expect(instance).to.have.property('paidSecondYearTuitionFee');
        // expect(instance.paidSecondYearTuitionFee).to.be(expectedValueLiteral);
      });

      it('should have the property paidSecondYearHostelFee (base name: "paidSecondYearHostelFee")', function() {
        // TODO: update the code to test the property paidSecondYearHostelFee
        expect(instance).to.have.property('paidSecondYearHostelFee');
        // expect(instance.paidSecondYearHostelFee).to.be(expectedValueLiteral);
      });

      it('should have the property studentStatus (base name: "studentStatus")', function() {
        // TODO: update the code to test the property studentStatus
        expect(instance).to.have.property('studentStatus');
        // expect(instance.studentStatus).to.be(expectedValueLiteral);
      });

    });
  });

}));
